# Copyright 2024 Notedown Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: extract.proto
# Protobuf Python Version: 5.28.3
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    28,
    3,
    '',
    'extract.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rextract.proto\x12\x07\x65xtract\")\n\x15\x45xtractArticleRequest\x12\x10\n\x03url\x18\x01 \x01(\tR\x03url\"t\n\x13\x45xtractVideoRequest\x12\x10\n\x03url\x18\x01 \x01(\tR\x03url\x12K\n\x14speech_to_text_model\x18\x02 \x01(\x0e\x32\x1a.extract.SpeechToTextModelR\x11speechToTextModel\"\x8a\x01\n\x0e\x45xtractRequest\x12:\n\x07\x61rticle\x18\x01 \x01(\x0b\x32\x1e.extract.ExtractArticleRequestH\x00R\x07\x61rticle\x12\x34\n\x05video\x18\x02 \x01(\x0b\x32\x1c.extract.ExtractVideoRequestH\x00R\x05videoB\x06\n\x04type\"j\n\x0f\x45xtractResponse\x12\x14\n\x05title\x18\x01 \x01(\tR\x05title\x12\'\n\x06\x66ormat\x18\x02 \x01(\x0e\x32\x0f.extract.FormatR\x06\x66ormat\x12\x18\n\x07\x63ontent\x18\x03 \x01(\x0cR\x07\x63ontent*&\n\x0f\x45mbeddingsModel\x12\x13\n\x0fNVIDIA_EMBED_V2\x10\x00*0\n\x11SpeechToTextModel\x12\x1b\n\x17OPENAI_WHISPER_LARGE_V3\x10\x00*C\n\x06\x46ormat\x12\x0b\n\x07\x41RTICLE\x10\x00\x12\t\n\x05VIDEO\x10\x01\x12\x0b\n\x07PODCAST\x10\x02\x12\x08\n\x04\x42OOK\x10\x03\x12\n\n\x06\x43OURSE\x10\x04\x32I\n\x07\x45xtract\x12>\n\x07\x45xtract\x12\x17.extract.ExtractRequest\x1a\x18.extract.ExtractResponse\"\x00\x42\x8b\x01\n\x0b\x63om.extractB\x0c\x45xtractProtoP\x01Z2github.com/notedownorg/library/plugins/extract/api\xa2\x02\x03\x45XX\xaa\x02\x07\x45xtract\xca\x02\x07\x45xtract\xe2\x02\x13\x45xtract\\GPBMetadata\xea\x02\x07\x45xtractb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'extract_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\013com.extractB\014ExtractProtoP\001Z2github.com/notedownorg/library/plugins/extract/api\242\002\003EXX\252\002\007Extract\312\002\007Extract\342\002\023Extract\\GPBMetadata\352\002\007Extract'
  _globals['_EMBEDDINGSMODEL']._serialized_start=436
  _globals['_EMBEDDINGSMODEL']._serialized_end=474
  _globals['_SPEECHTOTEXTMODEL']._serialized_start=476
  _globals['_SPEECHTOTEXTMODEL']._serialized_end=524
  _globals['_FORMAT']._serialized_start=526
  _globals['_FORMAT']._serialized_end=593
  _globals['_EXTRACTARTICLEREQUEST']._serialized_start=26
  _globals['_EXTRACTARTICLEREQUEST']._serialized_end=67
  _globals['_EXTRACTVIDEOREQUEST']._serialized_start=69
  _globals['_EXTRACTVIDEOREQUEST']._serialized_end=185
  _globals['_EXTRACTREQUEST']._serialized_start=188
  _globals['_EXTRACTREQUEST']._serialized_end=326
  _globals['_EXTRACTRESPONSE']._serialized_start=328
  _globals['_EXTRACTRESPONSE']._serialized_end=434
  _globals['_EXTRACT']._serialized_start=595
  _globals['_EXTRACT']._serialized_end=668
# @@protoc_insertion_point(module_scope)
